for (j in 1:4)
{
distribution = table(education[,j]) / nrow(education)
barplot(distribution, border = NA, col = brewer.pal(8, "Blues")[2:8],
axes = FALSE, main = sup_questions[j], cex.main = 1)
# add vertical axis, and rectangle around figure
axis(side = 2, las=2)
box("figure", col="gray70")
}
# reset default graphical parameters
par(op)
for (j in 1:4)
{
distribution = table(data_education[,j]) / nrow(data_education)
barplot(distribution, border = NA, col = brewer.pal(8, "Blues")[2:8],
axes = FALSE, main = sup_questions[j], cex.main = 1)
# add vertical axis, and rectangle around figure
axis(side = 2, las=2)
box("figure", col="gray70")
}
# reset default graphical parameters
par(op)
cor(data_education[, 1:4]
cor(data_education[,1:4])
cor(data_education[,1:4])
View(data_education)
cor(data_education[,2:5])
summary(data_education$gender)
table(data_education$gender,data_education$job)
install.packages("plsdepot")
library("plsdepot")
support_pca = nipals(education[,1:4])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)",
cex.main = 1)
support_pca = nipals(education[,1:4])
support_pca = nipals(data_education [,1:4])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variavel latente suporte (círculo de correlacao)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variavel latente suporte (círculo de correlacao)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variavel latente suporte (círculo de correlacao)", cex.main = 1)
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Carregando os dados do arquivo csv na variável data_education
data_education <- read.csv2("education.csv", sep=",")
# Levantando o total de observações da amostra
summary(data_education)
# Fazendo um cruzamento das variáveis de perfil gênero e trabalho
table(data_education$gender,data_education$job)
# Levantando o total de observações por gênero
summary(data_education$gender)
# Calculando a correlação entre os indicadores que compõe a variável latente suporte
cor(data_education[,2:5])
# Instalando a biblioteca de análise de componentes principais
install.packages("plsdepot")
# Carregando a biblioteca de análise de componentes principais
library("plsdepot")
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente aconselhamento
cor(data_education[,6:9])
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente valor
cor(data_education[,14:17])
# Criando a visualização para análise de correlação dos indicadores da variável latente valor
support_pca = nipals(data_education[,14:17])
plot(support_pca, main = "Indicadores da variável latente valor (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente satisfação
cor(data_education[,18:20])
# Criando a visualização para análise de correlação dos indicadores da variável latente satisfação
support_pca = nipals(data_education[,18:20])
plot(support_pca, main = "Indicadores da variável latente satisfacao (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente lealdade
cor(data_education[,21:24])
# Criando a visualização para análise de correlação dos indicadores da variável latente lealdade
support_pca = nipals(data_education[,21:24])
plot(support_pca, main = "Indicadores da variável latente lealdade (círculo de correlação)", cex.main = 1)
install.packages("plsdepot")
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente aconselhamento
cor(data_education[,6:9])
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente valor
cor(data_education[,14:17])
# Criando a visualização para análise de correlação dos indicadores da variável latente valor
support_pca = nipals(data_education[,14:17])
plot(support_pca, main = "Indicadores da variável latente valor (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente satisfação
cor(data_education[,18:20])
# Criando a visualização para análise de correlação dos indicadores da variável latente satisfação
support_pca = nipals(data_education[,18:20])
plot(support_pca, main = "Indicadores da variável latente satisfacao (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente lealdade
cor(data_education[,21:24])
# Criando a visualização para análise de correlação dos indicadores da variável latente lealdade
support_pca = nipals(data_education[,21:24])
plot(support_pca, main = "Indicadores da variável latente lealdade (círculo de correlação)", cex.main = 1)
library("plsdepot")
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente aconselhamento
cor(data_education[,6:9])
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente valor
cor(data_education[,14:17])
# Criando a visualização para análise de correlação dos indicadores da variável latente valor
support_pca = nipals(data_education[,14:17])
plot(support_pca, main = "Indicadores da variável latente valor (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente satisfação
cor(data_education[,18:20])
# Criando a visualização para análise de correlação dos indicadores da variável latente satisfação
support_pca = nipals(data_education[,18:20])
plot(support_pca, main = "Indicadores da variável latente satisfacao (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente lealdade
cor(data_education[,21:24])
# Criando a visualização para análise de correlação dos indicadores da variável latente lealdade
support_pca = nipals(data_education[,21:24])
plot(support_pca, main = "Indicadores da variável latente lealdade (círculo de correlação)", cex.main = 1)
cor(data_education[,6:9])
cor(data_education[,10:13])
support_pca = nipals(data_education[,10:13])
cor(data_education[,14:17])
cor(data_education[,18:20])
cor(data_education[,21:24])
v_advising = c(0,0,1,0,1,0)
v_tutoring = c(0,0,1,0,1,0)
v_value = c(0,0,0,0,1,0)
v_support = c(0,0,1,0,1,0)
v_satisfaction = c(0,0,0,0,0,1)
v_loyalty = c(0,0,0,0,0,0)
v_advising = c(0,0,1,0,1,0)
v_tutoring = c(0,0,1,0,1,0)
v_value = c(0,0,0,0,1,0)
v_support = c(0,0,1,0,1,0)
v_satisfaction = c(0,0,0,0,0,1)
v_loyalty = c(0,0,0,0,0,0)
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
model_path
innerplot(model_path, box.size = 0.1)
install.packages("innerplot")
library("innerplot")
install.packages("innerplot")
version
R.version.string
install.packages("innerplot")
install.packages("plspm")
library("plspm")
innerplot(model_path)
# Criando os vetores de caminho para cada variável latente do modelo
v_advising = c(0,0,0,0,0,0)
v_tutoring = c(0,0,0,0,0,0)
v_value = c(1,1,0,1,0,0)
v_support = c(0,0,0,0,0,0)
v_satisfaction = c(1,1,1,1,0,0)
v_loyalty = c(0,0,0,0,1,0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
innerplot(model_path)
innerplot(model_path,box.size = 0.1)
innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(1:4, 5:8, 9:12, 13:16, 17:19, 20:23)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
edu_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
model_modes = rep("A", 6)
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
model_blocks = list(1:4, 5:8, 9:12, 13:16, 17:19, 20:23)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
# Criando os vetores de caminho para cada variável latente do modelo
v_advising = c(0,0,0,0,0,0)
v_tutoring = c(0,0,0,0,0,0)
v_value = c(1,1,0,1,0,0)
v_support = c(0,0,0,0,0,0)
v_satisfaction = c(1,1,1,1,0,0)
v_loyalty = c(0,0,0,0,1,0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
#innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
data_education_2 <- data_education
data_education_2$num <- NULL
education_pls = plspm(data_education_2, model_path, model_blocks, modes = model_modes)
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
education_pls = plspm(data_education_2, model_path, model_blocks, modes = model_modes)
View(model_path)
View(model_path)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
#innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
View(data_education_2)
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
edu_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(edu_path) = rownames(edu_path)
# outer model
edu_blocks = list(1:4, 5:8, 9:12, 13:16, 17:19, 20:23)
# modes (reflective blocks)
edu_modes = rep("A", 6)
edu_pls1 = plspm(data_education_2, edu_path, edu_blocks, modes = edu_modes)
# Criando os vetores de caminho para cada variável latente do modelo
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
#innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
Loyalty = c(0, 0, 0, 0, 1, 0)
summary(education_pls)
# Criando os vetores de caminho para cada variável latente do modelo
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#análise da qualidade do modelo
education_pls$unidim
#exibindo as carcas nas variáveis latentes
plot(education_pls, what = "loadings")
# Criando o indicador de apreciação
data_education$sup.appre = 8 - data_education$sup.under
# Criando o indicador de honrado
data_education$loy.pleas = 8 - data_education$loy.asha
# nova configuração dos indicadores
model_blocks = list(c(2,28,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,29,24)
# nova configuração dos indicadores
model_blocks_2 = list(c(2,28,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,29,24))
# novo modelo de equações estruturais
education_pls_2 = plspm(data_education, model_path, model_blocks_2, modes = model_modes)
# nova configuração dos indicadores
model_blocks_2 = list(c(2,28,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,29,24))
# novo modelo de equações estruturais
education_pls_2 = plspm(data_education, model_path, model_blocks_2, modes = model_modes)
#exibindo as carcas nas variáveis latentes
plot(education_pls_2, what = "loadings")
education_pls_2$unidim
#avaliando a carga e comunalidade de cada indicador
education_pls_2$outer_model
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_2 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
education_pls_3$unidim
#exibindo as carcas nas variáveis latentes
plot(education_pls_3, what = "loadings")
# avaliando a carga e comunalidade de cada indicador
education_pls_3$outer_model
plot(edu_pls3, arr.pos = 0.35)
plot(education_pls_3, arr.pos = 0.35)
# análise do modelo estrutural
education_pls_3$inner_summary
# indicador de predição do modelo
education_pls_3$gof
edu_val = plspm(data_education, model_path, model_blocks_3, modes = model_modes,
boot.val = TRUE, br = 2000)
edu_val$boot$paths
# Carregando os dados do arquivo csv na variável data_education
data_education <- read.csv2("education.csv", sep=",")
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Carregando a biblioteca de análise de componentes principais
library("plsdepot")
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Criando os vetores de caminho para cada variável latente do modelo
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(model_path) = rownames(model_path)
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
library("plspm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
# avaliando a carga cruzada
education_pls_3$crossloadings
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.35)
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.5)
plot(education_pls_3, arr.pos = 0.25)
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.25)
plot(education_pls_3, arr.pos = 0.25)
plot(education_pls_3, arr.pos = 0.25)
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.35)
library("bnlearn")
# criando um grafo vazio
dag <- empty.graph(nodes = c("A", "S", "E", "O", "R", "T"))
# visualizando o objeto com a estrutura de grafo vazia e seus atributos
dag
# criando uma relação entre idade e educaçao
dag <- set.arc(dag, from = "A", to = "E")
# criando uma relação entre sexo e educaçao
dag <- set.arc(dag, from = "S", to = "E")
# criando uma relação entre educaçao e cargo
dag <- set.arc(dag, from = "E", to = "O")
# criando uma relação entre educação e residencia
dag <- set.arc(dag, from = "E", to = "R")
# criando uma relação entre cargo e transporte
dag <- set.arc(dag, from = "O", to = "T")
# criando uma relação entre residencia e transporte
dag <- set.arc(dag, from = "R", to = "T")
dag
# nós do grafo
nodes(dag)
# relaçoes do grafo
arcs(dag)
# outra forma de criar o grafo a partir de uma matriz
dag2 <- empty.graph(nodes = c("A", "S", "E", "O", "R", "T"))
arc.set <- matrix (c("A","E", "S","E","E","O","E","R","O","T","R","T"), byrow = TRUE, ncol = 2, dimnames = list(NULL, c("from","to")))
arcs(dag2) <- arc.set
# validando se os dois objetos de grafo sao iguais
all.equal(dag, dag2)
# definindo os valores para as variaveis categoricas do grafo
A.lv <- c("young", "adult", "old")
S.lv <- c("M", "F")
E.lv <- c("high", "uni")
O.lv <- c("emp", "self")
R.lv <- c("small", "big")
T.lv <- c("car", "train", "other")
# definindo as probabilidades das observacoes serem jovem, adulto ou idoso
A.prob <- array(c(0.30, 0.50, 0.20), dim = 3, dimnames = list(A = A.lv))
A.prob
# definindo as probabilidades das observacoes serem homem ou mulher
S.prob <- array(c(0.60, 0.40), dim = 2, dimnames = list(S = S.lv))
S.prob
# cruzamento das probabilidades do cargo com o nivel de educaçao
O.prob <- array(c(0.96, 0.04, 0.92, 0.08), dim = c(2, 2), dimnames = list(O = O.lv, E = E.lv))
O.prob
# cruzamento das probabilidades do residencia com o nivel de educaçao
R.prob <- array(c(0.25, 0.75, 0.20, 0.80), dim = c(2, 2), dimnames = list(R = R.lv, E = E.lv))
R.prob
# cruzamento das probabilidades entre educaçao, idade e sexo
E.prob <- array(c(0.75, 0.25, 0.72, 0.28, 0.88, 0.12, 0.64,0.36, 0.70, 0.30, 0.90, 0.10), dim = c(2, 3, 2),
dimnames = list(E = E.lv, A = A.lv, S = S.lv))
# cruzamento das probabilidades entre viagem, ocupaçao e residencia
T.prob <- array(c(0.48, 0.42, 0.10, 0.56, 0.36, 0.08, 0.58,
0.24, 0.18, 0.70, 0.21, 0.09), dim = c(3, 2, 2),
dimnames = list(T = T.lv, O = O.lv, R = R.lv))
# combinando o grafo com as distribuiçoes de probabilidade
cpt <- list(A = A.prob, S = S.prob, E = E.prob, O = O.prob, R = R.prob, T = T.prob)
bn <- custom.fit(dag, cpt)
setwd("/Users/raphaelalbino/Dropbox/ead-5917/exercicio_5/")
# lendo o arquivo da pesquisa
survey <- read.table("survey.txt", header = TRUE)
head(survey)
# estimando a maxima verossimilhança
bn.bayes <- bn.fit(dag, data = survey, method = "bayes", iss = 10)
bn.bayes$O
(nlevels(survey[, "T"]) - 1) * (nlevels(survey[, "E"]) - 1) *  +   (nlevels(survey[, "O"]) * nlevels(survey[, "R"]))
ci.test("T", "E", c("O", "R"), test = "mi", data = survey)
ci.test("T", "E", c("O", "R"), test = "x2", data = survey)
# Both tests return very large p-values, indicating that the dependence relationship encoded by E×T is not significant given the current DAG structure.
ci.test("T", "E", c("O", "R"), test = "x2", data = survey)
arc.strength(dag, data = survey, criterion = "x2")
# validando se ha uma ligaçao entre S e R
dsep(dag, x = "S", y = "R")
# validando se ha uma ligaçao entre O e R
dsep(dag, x = "O", y = "R")
# validando se E bloqueia o caminho e se S e R sao independentes
# validando se E bloqueia o caminho e se S e R sao independentes
dsep(dag, x = "S", y = "R", z = "E")
# podemos dizer que E é influenciado por A e S, isto é, se soubermos o tipo de educacao da pessoa, algumas combinacoes de idade e sexo serao mais provaveis do que outras
dsep(dag, x = "A", y = "S", z = "E")
biocLite("RBGL")
biocLite("Rgraphviz")
source("https://bioconductor.org/biocLite.R")
biocLite("RBGL")
biocLite("Rgraphviz")
library("gRain")
junction <- compile(as.grain(bn))
jsex <- setEvidence(junction, nodes = "S", states = "F")
querygrain(jsex, nodes = "T")$T
jres <- setEvidence(junction, nodes = "R", states = "small")
querygrain(jres, nodes = "T")$T
# plotando o grafo
graphviz.plot(dag)
# grafico de barra para as provabilidades condicionais
bn.fit.barchart(bn.mle$T, main = "Travel", xlab = "Pr(T | R,O)", ylab = "")
biocLite("Rgraphviz")
library("Rgraphviz")
# grafico de barra para as provabilidades condicionais
bn.fit.barchart(bn.mle$T, main = "Travel", xlab = "Pr(T | R,O)", ylab = "")
# grafico de barra para as provabilidades condicionais
bn.fit.barchart(bn.mle$T, main = "Travel", xlab = "Pr(T | R,O)", ylab = "")
bn <- custom.fit(dag, cpt)
bn.mle <- bn.fit(dag, data = survey, method = "mle")
bn.fit.barchart(bn.mle$T, main = "Travel", xlab = "Pr(T | R,O)", ylab = "")
