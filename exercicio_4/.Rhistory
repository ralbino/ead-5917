legend = rownames(anos_salario),beside=TRUE)
barplot(anos_salario, main="Salario por ano de experiencia",
xlab="Numero de funcionarios",beside=TRUE)
anos_salario<-table(scores$Salario,scores$Anos_de_Experiencia)
table(scores$Salario,scores$Anos_de_Experiencia)
cor(scores[-3])
getwd()
getwd
getwd()
setwd("/Users/raphaelalbino/Dropbox/ead-5917/exercicio_3/")
getwd()
setwd("/Users/raphaelalbino/Dropbox/ead-5917/exercicio_3/")
education_data <- read.csv2("/Users/raphaelalbino/Dropbox/ead-5917/exercicio_3/education.csv")
getwd()
setwd("Users/raphaelalbino/Dropbox/ead-5917/exercicio_3/")
getwd()
setwd("Users/raphaelalbino/Dropbox/ead-5917/exercicio_3/")
setwd("/Users/raphaelalbino/Dropbox/doutorado/EAD5917/exercicio_2/")
getwd()
setwd("/Users/raphaelalbino/Dropbox/doutorado/EAD5917/exercicio_2/")
data_education <- read.csv2("education.csv")
View(data_education)
View(data_education)
data_education <- read.csv2("education.csv", sep=",")
View(data_education)
summary(data_education)
library(RColorBrewer)
asd
install.packages("RColorBrewer")
library(RColorBrewer)
sq1 = "Help when not doing well"
sq2 = "I feel underappreciated"
sq3 = "I can find a place where I feel safe"
sq4 = "Concerns about school"
sup_questions = c(sq1, sq2, sq3, sq4)
op = par(mfrow = c(2,2), mar = c(2.5, 3.2, 2, 0.8))
for (j in 1:4)
{
distribution = table(education[,j]) / nrow(education)
barplot(distribution, border = NA, col = brewer.pal(8, "Blues")[2:8],
axes = FALSE, main = sup_questions[j], cex.main = 1)
# add vertical axis, and rectangle around figure
axis(side = 2, las=2)
box("figure", col="gray70")
}
# reset default graphical parameters
par(op)
for (j in 1:4)
{
distribution = table(education[,j]) / nrow(education)
barplot(distribution, border = NA, col = brewer.pal(8, "Blues")[2:8],
axes = FALSE, main = sup_questions[j], cex.main = 1)
# add vertical axis, and rectangle around figure
axis(side = 2, las=2)
box("figure", col="gray70")
}
# reset default graphical parameters
par(op)
for (j in 1:4)
{
distribution = table(data_education[,j]) / nrow(data_education)
barplot(distribution, border = NA, col = brewer.pal(8, "Blues")[2:8],
axes = FALSE, main = sup_questions[j], cex.main = 1)
# add vertical axis, and rectangle around figure
axis(side = 2, las=2)
box("figure", col="gray70")
}
# reset default graphical parameters
par(op)
cor(data_education[, 1:4]
cor(data_education[,1:4])
cor(data_education[,1:4])
View(data_education)
cor(data_education[,2:5])
summary(data_education$gender)
table(data_education$gender,data_education$job)
install.packages("plsdepot")
library("plsdepot")
support_pca = nipals(education[,1:4])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)",
cex.main = 1)
support_pca = nipals(education[,1:4])
support_pca = nipals(data_education [,1:4])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variavel latente suporte (círculo de correlacao)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variavel latente suporte (círculo de correlacao)", cex.main = 1)
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variavel latente suporte (círculo de correlacao)", cex.main = 1)
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Carregando os dados do arquivo csv na variável data_education
data_education <- read.csv2("education.csv", sep=",")
# Levantando o total de observações da amostra
summary(data_education)
# Fazendo um cruzamento das variáveis de perfil gênero e trabalho
table(data_education$gender,data_education$job)
# Levantando o total de observações por gênero
summary(data_education$gender)
# Calculando a correlação entre os indicadores que compõe a variável latente suporte
cor(data_education[,2:5])
# Instalando a biblioteca de análise de componentes principais
install.packages("plsdepot")
# Carregando a biblioteca de análise de componentes principais
library("plsdepot")
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente aconselhamento
cor(data_education[,6:9])
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente valor
cor(data_education[,14:17])
# Criando a visualização para análise de correlação dos indicadores da variável latente valor
support_pca = nipals(data_education[,14:17])
plot(support_pca, main = "Indicadores da variável latente valor (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente satisfação
cor(data_education[,18:20])
# Criando a visualização para análise de correlação dos indicadores da variável latente satisfação
support_pca = nipals(data_education[,18:20])
plot(support_pca, main = "Indicadores da variável latente satisfacao (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente lealdade
cor(data_education[,21:24])
# Criando a visualização para análise de correlação dos indicadores da variável latente lealdade
support_pca = nipals(data_education[,21:24])
plot(support_pca, main = "Indicadores da variável latente lealdade (círculo de correlação)", cex.main = 1)
install.packages("plsdepot")
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente aconselhamento
cor(data_education[,6:9])
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente valor
cor(data_education[,14:17])
# Criando a visualização para análise de correlação dos indicadores da variável latente valor
support_pca = nipals(data_education[,14:17])
plot(support_pca, main = "Indicadores da variável latente valor (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente satisfação
cor(data_education[,18:20])
# Criando a visualização para análise de correlação dos indicadores da variável latente satisfação
support_pca = nipals(data_education[,18:20])
plot(support_pca, main = "Indicadores da variável latente satisfacao (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente lealdade
cor(data_education[,21:24])
# Criando a visualização para análise de correlação dos indicadores da variável latente lealdade
support_pca = nipals(data_education[,21:24])
plot(support_pca, main = "Indicadores da variável latente lealdade (círculo de correlação)", cex.main = 1)
library("plsdepot")
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education [,2:5])
plot(support_pca, main = "Indicadores da variável latente suporte (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente aconselhamento
cor(data_education[,6:9])
# Criando a visualização para análise de correlação dos indicadores da variável latente suporte
support_pca = nipals(data_education[,6:9])
plot(support_pca, main = "Indicadores da variável latente aconselhamento (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente valor
cor(data_education[,14:17])
# Criando a visualização para análise de correlação dos indicadores da variável latente valor
support_pca = nipals(data_education[,14:17])
plot(support_pca, main = "Indicadores da variável latente valor (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente satisfação
cor(data_education[,18:20])
# Criando a visualização para análise de correlação dos indicadores da variável latente satisfação
support_pca = nipals(data_education[,18:20])
plot(support_pca, main = "Indicadores da variável latente satisfacao (círculo de correlação)", cex.main = 1)
# Calculando a correlação entre os indicadores que compõe a variável latente lealdade
cor(data_education[,21:24])
# Criando a visualização para análise de correlação dos indicadores da variável latente lealdade
support_pca = nipals(data_education[,21:24])
plot(support_pca, main = "Indicadores da variável latente lealdade (círculo de correlação)", cex.main = 1)
cor(data_education[,6:9])
cor(data_education[,10:13])
support_pca = nipals(data_education[,10:13])
cor(data_education[,14:17])
cor(data_education[,18:20])
cor(data_education[,21:24])
v_advising = c(0,0,1,0,1,0)
v_tutoring = c(0,0,1,0,1,0)
v_value = c(0,0,0,0,1,0)
v_support = c(0,0,1,0,1,0)
v_satisfaction = c(0,0,0,0,0,1)
v_loyalty = c(0,0,0,0,0,0)
v_advising = c(0,0,1,0,1,0)
v_tutoring = c(0,0,1,0,1,0)
v_value = c(0,0,0,0,1,0)
v_support = c(0,0,1,0,1,0)
v_satisfaction = c(0,0,0,0,0,1)
v_loyalty = c(0,0,0,0,0,0)
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
model_path
innerplot(model_path, box.size = 0.1)
install.packages("innerplot")
library("innerplot")
install.packages("innerplot")
version
R.version.string
install.packages("innerplot")
install.packages("plspm")
library("plspm")
innerplot(model_path)
# Criando os vetores de caminho para cada variável latente do modelo
v_advising = c(0,0,0,0,0,0)
v_tutoring = c(0,0,0,0,0,0)
v_value = c(1,1,0,1,0,0)
v_support = c(0,0,0,0,0,0)
v_satisfaction = c(1,1,1,1,0,0)
v_loyalty = c(0,0,0,0,1,0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
innerplot(model_path)
innerplot(model_path,box.size = 0.1)
innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(1:4, 5:8, 9:12, 13:16, 17:19, 20:23)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
edu_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
model_modes = rep("A", 6)
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
model_blocks = list(1:4, 5:8, 9:12, 13:16, 17:19, 20:23)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
# Criando os vetores de caminho para cada variável latente do modelo
v_advising = c(0,0,0,0,0,0)
v_tutoring = c(0,0,0,0,0,0)
v_value = c(1,1,0,1,0,0)
v_support = c(0,0,0,0,0,0)
v_satisfaction = c(1,1,1,1,0,0)
v_loyalty = c(0,0,0,0,1,0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
#innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
data_education_2 <- data_education
data_education_2$num <- NULL
education_pls = plspm(data_education_2, model_path, model_blocks, modes = model_modes)
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
education_pls = plspm(data_education_2, model_path, model_blocks, modes = model_modes)
View(model_path)
View(model_path)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(v_advising,v_tutoring,v_value, v_support, v_satisfaction,v_loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
#innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
View(data_education_2)
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
edu_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(edu_path) = rownames(edu_path)
# outer model
edu_blocks = list(1:4, 5:8, 9:12, 13:16, 17:19, 20:23)
# modes (reflective blocks)
edu_modes = rep("A", 6)
edu_pls1 = plspm(data_education_2, edu_path, edu_blocks, modes = edu_modes)
# Criando os vetores de caminho para cada variável latente do modelo
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
#innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#modelo de equações estruturais
education_pls = plspm(data_education, model_path, model_blocks, modes = model_modes)
Loyalty = c(0, 0, 0, 0, 1, 0)
summary(education_pls)
# Criando os vetores de caminho para cada variável latente do modelo
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(model_path) = rownames(model_path)
# install.packages("plspm")
#library("plspm")
innerplot(model_path,box.size = 0.1)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
#análise da qualidade do modelo
education_pls$unidim
#exibindo as carcas nas variáveis latentes
plot(education_pls, what = "loadings")
# Criando o indicador de apreciação
data_education$sup.appre = 8 - data_education$sup.under
# Criando o indicador de honrado
data_education$loy.pleas = 8 - data_education$loy.asha
# nova configuração dos indicadores
model_blocks = list(c(2,28,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,29,24)
# nova configuração dos indicadores
model_blocks_2 = list(c(2,28,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,29,24))
# novo modelo de equações estruturais
education_pls_2 = plspm(data_education, model_path, model_blocks_2, modes = model_modes)
# nova configuração dos indicadores
model_blocks_2 = list(c(2,28,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,29,24))
# novo modelo de equações estruturais
education_pls_2 = plspm(data_education, model_path, model_blocks_2, modes = model_modes)
#exibindo as carcas nas variáveis latentes
plot(education_pls_2, what = "loadings")
education_pls_2$unidim
#avaliando a carga e comunalidade de cada indicador
education_pls_2$outer_model
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_2 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
education_pls_3$unidim
#exibindo as carcas nas variáveis latentes
plot(education_pls_3, what = "loadings")
# avaliando a carga e comunalidade de cada indicador
education_pls_3$outer_model
plot(edu_pls3, arr.pos = 0.35)
plot(education_pls_3, arr.pos = 0.35)
# análise do modelo estrutural
education_pls_3$inner_summary
# indicador de predição do modelo
education_pls_3$gof
edu_val = plspm(data_education, model_path, model_blocks_3, modes = model_modes,
boot.val = TRUE, br = 2000)
edu_val$boot$paths
# Carregando os dados do arquivo csv na variável data_education
data_education <- read.csv2("education.csv", sep=",")
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Carregando a biblioteca de análise de componentes principais
library("plsdepot")
# Calculando a correlação entre os indicadores que compõe a variável latente tutoria
cor(data_education[,10:13])
# Criando a visualização para análise de correlação dos indicadores da variável latente tutoria
support_pca = nipals(data_education[,10:13])
plot(support_pca, main = "Indicadores da variável latente tutoria (círculo de correlação)", cex.main = 1)
# Criando os vetores de caminho para cada variável latente do modelo
Support = c(0, 0, 0, 0, 0, 0)
Advising = c(0, 0, 0, 0, 0, 0)
Tutoring = c(0, 0, 0, 0, 0, 0)
Value = c(1, 1, 1, 0, 0, 0)
Satisfaction = c(1, 1, 1, 1, 0, 0)
Loyalty = c(0, 0, 0, 0, 1, 0)
# Definindo a matriz de direcionamento do modelo
model_path = rbind(Support, Advising, Tutoring, Value, Satisfaction, Loyalty)
colnames(model_path) = rownames(model_path)
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
library("plspm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
# definição dos indicadores
model_blocks = list(2:5, 6:9, 10:13, 14:17, 18:20, 21:24)
# definição do tipo de relação dos indicadores com as variáveis latentes - reflexivo - os indicadores geram o construto
model_modes = rep("A", 6)
# nova configuração removendo os indicadores honrado e apreciação
model_blocks_3 = list(c(2,4,5), 6:9, 10:13, 14:17, 18:20, c(21,22,24))
# modelo final
education_pls_3 = plspm(data_education, model_path, model_blocks_3, modes = model_modes)
# avaliando a carga cruzada
education_pls_3$crossloadings
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.35)
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.5)
plot(education_pls_3, arr.pos = 0.25)
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.25)
plot(education_pls_3, arr.pos = 0.25)
plot(education_pls_3, arr.pos = 0.25)
# modelo final com as cargas
plot(education_pls_3, arr.pos = 0.35)
setwd("/Users/raphaelalbino/Dropbox/ead-5917/exercicio_4/")
data_customer_satisfaction <- read.csv2("mobi250.csv",sep=";")
# montando as relacoes do modelo
Image <- c(0,0,0,0,0,0,0)
Expectation <- c(0,0,0,0,0,0,0)
Quality <- c(0,1,0,0,0,0,0)
Value <- c(0,1,1,0,0,0,0)
Satisfaction <- c(1,1,1,1,0,0,0)
Complaints <- c(0,0,0,0,1,0,0)
Loyalty <- c(1,0,0,0,1,1,0)
model_path = rbind(Image,Expectation, Quality, Value, Satisfaction,Complaints,Loyalty)
colnames(model_path) = rownames(model_path)
library("plspm")
# definindo que o modelo é reflexivo em todas as variaveis latentes
model_modes = rep("A", 7)
# exibindo o modelo conceitual
innerplot(model_path,box.size = 0.05)
# associando os indicadores a variaveis latentes
model_blocks =list(1:5,6:8,9:15,16:17,18:20,21,22:24)
# gerando o modelo de equacoes estruturais
satisfaction_pls = plspm(data_customer_satisfaction, model_path, model_blocks, modes = model_modes,boot.val=TRUE,br=2000)
# exibindo as cargas fatoriais das relacoes entre as variaveis latentes
plot(satisfaction_pls, what = "loadings")
# analisando a significancia das relacoes entre as variaveis latentes
satisfaction_pls$boot$paths
# analisando a carga fatorial dos indicadores nas variaveis latentes
satisfaction_pls$outer_model
# analisando a media da variancia extraida
satisfaction_pls$inner_summary
# analisando a carga cruzada
satisfaction_pls$crossloadings
# gerando a matrix de correlacao entre os escores
cor(satisfaction_pls$scores)
# analisando a confiabilidade composta
satisfaction_pls$unidim
# modelo com as cargas
plot(satisfaction_pls)
# regressoes para cada uma das variaveis latentes
satisfaction_pls$inner_model
good_rows = c(3:5, 7:15)
path_effs = as.matrix(satisfaction_pls$effects[good_rows, 2:3])
rownames(path_effs) = satisfaction_pls$effects[good_rows, 1]
# analise dos efeitos diretos e indiretos
path_effs
# analise do r-quadrado
satisfaction_pls$inner_summary
# capturando os escores padronizados
matrix_scores <- satisfaction_pls$scores
data_customer_satisfaction$scoreSatisfaction <- matrix_scores[,5]
data_customer_satisfaction$scoreValue <- matrix_scores[,4]
data_customer_satisfaction$scoreExpectation <- matrix_scores[,2]
data_customer_satisfaction$scoreQuality <- matrix_scores[,3]
data_customer_satisfaction$scoreImage <- matrix_scores[,1]
library("car")
# avaliando a multicolinearidade do escore satisfacao a partir dos escores de valor, expectativa e imagem
vif(lm(scoreSatisfaction ~ scoreImage + scoreQuality + scoreValue+scoreExpectation,data=data_customer_satisfaction))
